Förslag på tentamens omfattning:

## Type generics  
Bör kunna läsa/skriva och förstå kod som använder type generics

## Datastrukturer
Array, Multidimensional Array, List, LinkedList, HashSet, Dictionary, Stack, Queue, Tuples, Heap
Kunna redogöra för fördelar/nackdelar med olika datastrukturer. 
Kunna känna igen datastrukturer i kod.

## Algoritmer
Kunna formulera en algoritm i flödesdiagram eller i text
Kunna redogöra för en algoritms tidsåtgång och minnesåtgång, worst case, best case, O(1), O(n), O(n^2), O(log n)
Kunna diskutera runt tradeoffs läsbarhet/effektivitet/abstraktionsnivå

## Rekursion
Kunna identifiera och designa rekursiva datastrukturer och algoritmer

## Säkerhet
Symmetrisk och asymmetrisk kryptering. Känns till vad autentisering och auktorisering är, och vad det används till.

## Design Patterns
Factory Method, Singleton, Decorator, Adapter, Facade, Observer, State, Iterator, Chain Of Responsibility. Obs fler kan komma på tentan. Alla patterns i GOF är av intresse!

## SOLID
Kunna beskriva de olika principerna.
Kunna ge exempel på kod som uppfyller/ej uppfyller de olika principerna.
Kunna känna igen kod som uppfyller/ej uppfyller de olika principerna.

## Parallellprogrammering
Känna till olika former får trådsynkronisering och kunna implementera dem i viss mån.
Kunna förstå async/await i viss mån. Sorry java-people. Async/await är något som även finns i javascript och värt att lära sig.

## Testning
Kunna skriva relevanta tester. Känna till vad mockning är, men inga särskilda bibliotek kommer att testas. Pseudokodnivå kan efterfrågas.

## Övrig kunskap
Kunskap kring vad en ORM gör och hur. Känna till hur vissa objektorienterade datastrukturer kan mappas mot relationsdatabasers struktur.
Grundläggande kunskap kring HTTP. Känna till begrepp som controllers, url, http-verb, request/response, body, api, json, xml
Känna till grundläggande om transaktionshantering. (begin, commit, rollback)
Generell variabel/metod/klassnamngivning och kodläsbarhet kommer också att bedömas.
Dependency injection.
